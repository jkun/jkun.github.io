<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[阿坤的点点滴滴]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://jkun.github.io/"/>
  <updated>2014-08-31T02:36:59.529Z</updated>
  <id>http://jkun.github.io/</id>
  
  <author>
    <name><![CDATA[Zhao Jiangkun]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[cocos2dx_video]]></title>
    <link href="http://jkun.github.io/2014/08/28/cocos2dx_video/"/>
    <id>http://jkun.github.io/2014/08/28/cocos2dx_video/</id>
    <published>2014-08-28T14:49:05.000Z</published>
    <updated>2014-08-29T00:42:11.000Z</updated>
    <content type="html"><![CDATA[<p>这篇文章主要总结在android上使用cocos2dx进行视频播放功能的使用。<br>一开始没有注意到cocos2dx的新版本已经集成这个功能，所以一直打算使用FFMpeg来进行相关的开发，经过同学提醒，使用cocos2dX自带的API，使得开发难度大大降低，只需要调用相关的API即可。</p>
<p>在Cocos2dx中，进行视频播放的类为<code>VideoPlayer</code>，需要包含<code>ui/UIVideoPlayer.h</code>，然后可以再程序中使用<code>using namespace cocos2d::experimental::ui;</code>将命名空间引入进来。下边代码就是在程序启动之后即可播放相应的视频<br> <a id="more"></a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">bool</span> HelloWorld::init()</div><div class="line">{</div><div class="line">    <span class="comment">//////////////////////////////</span></div><div class="line">    <span class="comment">// 1. super init first</span></div><div class="line">    <span class="keyword">if</span> ( !Layer::init() )</div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">	_visibleRect = Director::getInstance()-&gt;getOpenGLView()-&gt;getVisibleRect();</div><div class="line">	MenuItemFont::setFontSize(<span class="number">16</span>);</div><div class="line"></div><div class="line">	<span class="keyword">auto</span> centerPos = Vec2(_visibleRect.origin.x + _visibleRect.size.width / <span class="number">2</span>, _visibleRect.origin.y + _visibleRect.size.height / <span class="number">2</span>);</div><div class="line"></div><div class="line">	_videoPlayer = VideoPlayer::create();</div><div class="line">	_videoPlayer-&gt;setPosition(centerPos);</div><div class="line">	_videoPlayer-&gt;setAnchorPoint(Vec2::ANCHOR_MIDDLE);</div><div class="line">	_videoPlayer-&gt;setContentSize(Size(_visibleRect.size.width * <span class="number">0.8f</span>, _visibleRect.size.height * <span class="number">0.8f</span>));</div><div class="line">	<span class="keyword">this</span>-&gt;addChild(_videoPlayer);</div><div class="line">    </div><div class="line">	_videoPlayer-&gt;setFileName(<span class="string">"cocosvideo.mp4"</span>);</div><div class="line">	_videoPlayer-&gt;play();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>需要说明的是：<br>创建<code>VideoPlayer</code>，可以直接调用<code>VideoPlayer::create()</code>即可；然后通过<code>setPosition,setAnchorPoint</code>来设置位置,<code>setContentSize</code>来设置显示的大小；<code>setFileName</code>设置文件名字，或可调用<code>setURL</code>来设置网络地址进行视频播放;<code>play</code>函数即可进行播放。<br>视频的控制可通过一下几个函数:<code>play</code>,<code>pause</code>,<code>stop</code>,<code>pause</code>,<code>resume</code><br>通过<code>setFullScreenEnabled</code>可使得视频进行全屏播放。<br>最后视频的播放状态可通过一个回调函数来解决。设置回调函数是通过<code>_videoPlayer-&gt;addEventListener(CC_CALLBACK_2(VideoPlayerTest::videoEventCallback, this));</code>，通过<code>EventType</code>来判断视频的状态。</p>
<p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> VideoPlayerTest::videoEventCallback(Ref* sender, VideoPlayer::EventType eventType)</div><div class="line">{</div><div class="line">    <span class="keyword">switch</span> (eventType) {</div><div class="line">        <span class="keyword">case</span> VideoPlayer::EventType::PLAYING:</div><div class="line">            _videoStateLabel-&gt;setString(<span class="string">"PLAYING"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> VideoPlayer::EventType::PAUSED:</div><div class="line">            _videoStateLabel-&gt;setString(<span class="string">"PAUSED"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> VideoPlayer::EventType::STOPPED:</div><div class="line">            _videoStateLabel-&gt;setString(<span class="string">"STOPPED"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> VideoPlayer::EventType::COMPLETED:</div><div class="line">            _videoStateLabel-&gt;setString(<span class="string">"COMPLETED"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure><br>所有代码可参考<code>Cocos2dx</code>的<code>test</code>程序<br>最后注意的是在Android上运行需要修改相应的<code>Android.mk</code>文件，不然会有一些lib编译系统找不到，需要修改的文件位置是<code>{project}/proj.android/jni/Android.mk</code>，我目前采用的策略是将所有注释的语句全部取消掉，这样就可以编译通过了。</p>
]]></content>
    <summary type="html"><![CDATA[<p>这篇文章主要总结在android上使用cocos2dx进行视频播放功能的使用。<br>一开始没有注意到cocos2dx的新版本已经集成这个功能，所以一直打算使用FFMpeg来进行相关的开发，经过同学提醒，使用cocos2dX自带的API，使得开发难度大大降低，只需要调用相关的API即可。</p>
<p>在Cocos2dx中，进行视频播放的类为<code>VideoPlayer</code>，需要包含<code>ui/UIVideoPlayer.h</code>，然后可以再程序中使用<code>using namespace cocos2d::experimental::ui;</code>将命名空间引入进来。下边代码就是在程序启动之后即可播放相应的视频<br> ]]></summary>
    
  </entry>
  
</feed>
